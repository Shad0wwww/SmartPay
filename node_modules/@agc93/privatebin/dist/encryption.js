"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptMessageBuffer = exports.EncryptionBuilder = void 0;
const crypto_1 = __importDefault(require("crypto"));
const util_1 = require("util");
const pbkdf2 = util_1.promisify(crypto_1.default.pbkdf2);
/**
 * A fluent builder to help configure encryption options.
 */
class EncryptionBuilder {
    /**
     *
     */
    constructor() {
        /* usePassword = (password: string): EncryptionBuilder => {
            this._options.password = () => password;
            return this;
        } */
        this.getDefaults = () => {
            return {
                algorithm: 'aes',
                encryptionMode: 'gcm',
                keySize: 256,
                tagSize: 128,
                iterations: 100000,
                compression: 'none',
                key: crypto_1.default.randomBytes(32)
            };
        };
        this.buildOptions = () => {
            var defaults = this.getDefaults();
            return { ...defaults, ...this._options };
        };
        this._options = {};
    }
    setKeySize(keySize) {
        this._options.keySize = keySize;
        return this;
    }
    setTagSize(tagSize) {
        this._options.tagSize = tagSize;
        return this;
    }
    setIterations(iterations) {
        this._options.iterations = iterations;
        return this;
    }
    enableCompression(enable = true) {
        this._options.compression = enable ? 'zlib' : 'none';
        return this;
    }
    useKey(key) {
        if (typeof (key) === 'string') {
            this._options.key = Buffer.from(key, 'utf8');
        }
        else {
            this._options.key = key;
        }
        return this;
    }
}
exports.EncryptionBuilder = EncryptionBuilder;
async function encryptMessageBuffer(messageBytes, encryptionOptions, uploadOptions) {
    let iv = crypto_1.default.randomBytes(16);
    let salt = crypto_1.default.randomBytes(8);
    // this should use a key on IEncryptionOptions
    // let password = crypto.randomBytes(32);
    var cryptedPassword = await generateKey(encryptionOptions.key, salt, encryptionOptions);
    var crypt = { iv, salt, key: cryptedPassword };
    var algorithm = `aes-${encryptionOptions.keySize}-${encryptionOptions.encryptionMode}`; // even though it might not actually be GCM
    var cipher = crypto_1.default.createCipheriv(algorithm, cryptedPassword, iv, { authTagLength: 16 });
    // var cipher = crypto.createCipheriv(algorithm, cryptedPassword, iv);
    var data = getData(crypt, encryptionOptions, uploadOptions);
    cipher.setAAD(Buffer.from(JSON.stringify(data), 'utf8'));
    var cipherText = Buffer.concat([cipher.update(messageBytes), cipher.final(), cipher.getAuthTag()]);
    return { cipherText, data };
}
exports.encryptMessageBuffer = encryptMessageBuffer;
async function generateKey(password, salt, options) {
    var cryptResult = await pbkdf2(password !== null && password !== void 0 ? password : crypto_1.default.randomBytes(32), salt, options.iterations, password.length, 'sha256');
    // var cryptResult = crypto.pbkdf2Sync(password, salt, options.iterations, options.keySize / 8, 'sha256');
    return cryptResult;
}
function getData(params, opts, request) {
    const adata = [];
    adata.push([params.iv.toString('base64'), params.salt.toString('base64'), opts.iterations, opts.keySize, opts.tagSize, 'aes', opts.encryptionMode, opts.compression]);
    adata.push(request.uploadFormat);
    adata.push(request.openDiscussion ? 1 : 0);
    adata.push(request.burnAfterReading ? 1 : 0);
    return adata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmNyeXB0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLG9EQUE0QjtBQUM1QiwrQkFBaUM7QUFNakMsTUFBTSxNQUFNLEdBQUcsZ0JBQVMsQ0FBQyxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBc0N4Qzs7R0FFRztBQUNILE1BQWEsaUJBQWlCO0lBRTFCOztPQUVHO0lBQ0g7UUFtQ0E7OztZQUdJO1FBRUksZ0JBQVcsR0FBRyxHQUF1QixFQUFFO1lBQzNDLE9BQU87Z0JBQ0gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLGNBQWMsRUFBRSxLQUFLO2dCQUNyQixPQUFPLEVBQUUsR0FBRztnQkFDWixPQUFPLEVBQUUsR0FBRztnQkFDWixVQUFVLEVBQUUsTUFBTTtnQkFDbEIsV0FBVyxFQUFFLE1BQU07Z0JBQ25CLEdBQUcsRUFBRSxnQkFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7YUFDOUIsQ0FBQztRQUNOLENBQUMsQ0FBQTtRQUVELGlCQUFZLEdBQUcsR0FBdUIsRUFBRTtZQUNwQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsT0FBTyxFQUFDLEdBQUcsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQTtRQXRERyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQXdCLENBQUM7SUFDN0MsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUFnQjtRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUFnQjtRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVE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